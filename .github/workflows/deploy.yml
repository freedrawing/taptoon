- name: Early Health Check
    run: |
      echo "가용한 인스턴스 헬스 체크 중..."
      
      # 인스턴스 가져오기
      INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
        --auto-scaling-group-name "asg-taptoon" \
        --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
        --output json)
      
      TOTAL_INSTANCES=$(echo "$INSTANCES" | jq -r 'length')
      echo "서비스 중인 인스턴스 $TOTAL_INSTANCES개 발견"
      
      if [ "$TOTAL_INSTANCES" -eq 0 ]; then
        echo "⚠️ 서비스 중인 인스턴스가 없습니다. 배포가 진행 중일 수 있습니다."
        exit 0
      fi
      
      # 결과 파일 생성
      mkdir -p /tmp/health_checks
      touch /tmp/combined_health.log
      
      # 간단한 헬스 체크
      HEALTHY_INSTANCES=0
      
      for INSTANCE_ID in $(echo "$INSTANCES" | jq -r '.[]'); do
        # IP 주소 가져오기
        IP=$(aws ec2 describe-instances \
          --instance-ids $INSTANCE_ID \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text)
      
        if [ -z "$IP" ] || [ "$IP" == "null" ]; then
          echo "⚠️ 인스턴스 $INSTANCE_ID에 공용 IP가 없음"
          continue
        fi
      
        echo "인스턴스 $INSTANCE_ID ($IP) 헬스 체크 중..."
        HEALTH=$(curl -s --connect-timeout 3 --max-time 5 "http://$IP:8080/health" || echo "DOWN")
      
        if echo "$HEALTH" | grep -q "UP"; then
          echo "✅ 인스턴스 $INSTANCE_ID ($IP) 정상"
          HEALTHY_INSTANCES=$((HEALTHY_INSTANCES + 1))
        else
          # 두 번 더 시도
          for i in {2..3}; do
            echo "재시도 $i/3..."
            sleep 2
            HEALTH=$(curl -s --connect-timeout 3 --max-time 5 "http://$IP:8080/health" || echo "DOWN")
      
            if echo "$HEALTH" | grep -q "UP"; then
              echo "✅ 인스턴스 $INSTANCE_ID ($IP) 정상 (재시도 $i에서 성공)"
              HEALTHY_INSTANCES=$((HEALTHY_INSTANCES + 1))
              break
            fi
          done
      
          if ! echo "$HEALTH" | grep -q "UP"; then
            echo "⚠️ 인스턴스 $INSTANCE_ID ($IP) 비정상 (3번 시도 실패)"
          fi
        fi
      done
      
      echo "$TOTAL_INSTANCES 중 $HEALTHY_INSTANCES 인스턴스가 정상 상태"
      
      # 필요한 최소 정상 인스턴스 수 계산 (30% 이상)
      MIN_HEALTHY=$((TOTAL_INSTANCES * 30 / 100))
      if [ $MIN_HEALTHY -lt 1 ]; then MIN_HEALTHY=1; fi
      
      if [ $HEALTHY_INSTANCES -ge $MIN_HEALTHY ]; then
        echo "✅ 최소 $MIN_HEALTHY 인스턴스가 정상 상태입니다. 배포가 정상적으로 진행 중입니다."
        exit 0
      else
        echo "⚠️ $MIN_HEALTHY 인스턴스 미만이 정상 상태입니다."
        echo "하지만 배포는 계속 진행 중이므로, 다음 작업을 계속 진행합니다."
        # 중요: 여기서도 성공으로 종료합니다
        exit 0
      fi