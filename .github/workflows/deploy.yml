name: Deploy to AWS with Rolling Update
on:
  push:
    branches: [ cd-deploy ]  # 메인 브랜치에 push될 때 실행

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload docker-compose file to S3
        run: |
          aws s3 cp docker-compose.yml s3://taptoon-config/docker-compose.yml --sse AES256

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taptoon
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
                      --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy_with_rolling:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Monitor Rolling Deployment Progress
        run: |
          echo "Monitoring individual instance transitions..."
          START_TIME=$(date +%s)
          MAX_DURATION=1800  # 30분
          LAST_INSTANCES=""

          while [ $(($(date +%s) - START_TIME)) -lt $MAX_DURATION ]; do
            # 현재 인스턴스 상태 확인
            CURRENT_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
              --auto-scaling-group-name "asg-taptoon" \
              --query "AutoScalingGroups[0].Instances[*].[InstanceId,LifecycleState]" \
              --output json)

            # 이전과 다른 경우 변경 사항 출력
            if [ "$CURRENT_INSTANCES" != "$LAST_INSTANCES" ]; then
              echo "Instance state change detected at $(date)"
              echo "$CURRENT_INSTANCES" | jq -r '.[] | "Instance \(.[0]): \(.[1])"'

              # 새롭게 InService 상태가 된 인스턴스 확인
              NEW_INSTANCES=$(echo "$CURRENT_INSTANCES" | jq -r '.[] | select(.[1] == "InService") | .[0]')

              # 새로운 인스턴스의 헬스 체크
              for INSTANCE_ID in $NEW_INSTANCES; do
                # 이전 목록에 없는 새 인스턴스인지 확인
                if ! echo "$LAST_INSTANCES" | jq -r '.[] | select(.[1] == "InService") | .[0]' | grep -q "$INSTANCE_ID"; then
                  IP=$(aws ec2 describe-instances \
                    --instance-ids $INSTANCE_ID \
                    --query "Reservations[0].Instances[0].PublicIpAddress" \
                    --output text)

                  echo "Verifying new instance $INSTANCE_ID ($IP)..."
                  # 헬스 체크 최대 5회 시도
                  for i in {1..5}; do
                    HEALTH=$(ssh -o StrictHostKeyChecking=no -i /tmp/ec2-ssh-key.pem ubuntu@$IP "curl -s localhost:80/health || echo 'DOWN'" 2>/dev/null)

                    if echo "$HEALTH" | grep -q "UP"; then
                      echo "✅ New instance $INSTANCE_ID is healthy and serving traffic"
                      break
                    else
                      echo "Attempt $i: Instance $INSTANCE_ID not yet healthy, waiting..."
                      if [ $i -eq 5 ]; then
                        echo "⚠️ Warning: New instance $INSTANCE_ID may not be healthy, but rolling update continues"
                      fi
                      sleep 15
                    fi
                  done
                fi
              done

              LAST_INSTANCES="$CURRENT_INSTANCES"
            fi

            # 인스턴스 리프레시 상태 확인
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "asg-taptoon" \
              --query "InstanceRefreshes[0].Status" --output text)
            PROGRESS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "asg-taptoon" \
              --query "InstanceRefreshes[0].PercentageComplete" --output text)

            echo "Overall progress: $PROGRESS% ($STATUS)"

            if [ "$STATUS" == "Successful" ]; then
              echo "✅ Rolling deployment completed successfully!"
              break
            elif [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              echo "❌ Rolling deployment failed: $STATUS"
              exit 1
            fi

            sleep 15
          done

  health_check:
    needs: deploy_with_rolling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Check ASG instance health
        run: |
          INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name "asg-taptoon" \
            --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
            --output json)
          for INSTANCE_ID in $(echo "$INSTANCES" | jq -r '.[]'); do
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)
            if [ -z "$IP" ]; then
              echo "No public IP for $INSTANCE_ID, skipping..."
              continue
            fi
            echo "Checking health on $IP..."
            HEALTH=$(curl -s "http://$IP:8080/health" || echo "DOWN")
            if echo "$HEALTH" | grep -q "UP"; then
              echo "Instance $INSTANCE_ID ($IP) is healthy!"
            else
              echo "Instance $INSTANCE_ID ($IP) is unhealthy!"
              exit 1
            fi
          done

  cleanup_ecr:
    needs: deploy_with_rolling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Clean up old ECR images
        env:
          ECR_REPOSITORY: taptoon
        run: |
          IMAGES_TO_DELETE=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[:-5].imageDigest' \
            --output json)
          if [ "$IMAGES_TO_DELETE" != "[]" ] && [ "$IMAGES_TO_DELETE" != "" ]; then
            for digest in $(echo $IMAGES_TO_DELETE | jq -r '.[]'); do
              aws ecr batch-delete-image \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageDigest=$digest
            done
            echo "Old ECR images cleaned up"
          else
            echo "No old ECR images to clean up"
          fi