name: Deploy to AWS with Rolling Update
on:
  push:
    branches: [ cd-deploy ]  # 메인 브랜치에 push될 때 실행

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload config file to S3
        run: |
          echo "${{ secrets.APPLICATION_DEPLOY_YAML }}" > application-deploy.yaml
          aws s3 cp application-deploy.yaml s3://taptoon-config/application-deploy.yaml --sse AES256
          rm application-deploy.yaml

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taptoon
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
                      --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy_with_rolling:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Check and Cancel Existing Instance Refresh
        run: |
          echo "Checking for existing Instance Refresh..."
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name "asg-taptoon" \
            --query "InstanceRefreshes[?Status=='InProgress'].Status" \
            --output text 2>/dev/null || echo "None")
          if [ "$STATUS" == "InProgress" ]; then
            echo "Instance Refresh in progress, cancelling..."
            aws autoscaling cancel-instance-refresh \
              --auto-scaling-group-name "asg-taptoon"
            for i in {1..10}; do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name "asg-taptoon" \
                --query "InstanceRefreshes[0].Status" --output text)
              if [ "$STATUS" != "InProgress" ]; then
                echo "Instance Refresh cancelled or completed: $STATUS"
                break
              fi
              echo "Waiting for cancellation ($i/10)..."
              sleep 10
            done
            if [ "$STATUS" == "InProgress" ]; then
              echo "Failed to cancel Instance Refresh in time"
              exit 1
            fi
          else
            echo "No active Instance Refresh found: $STATUS"
          fi

      - name: Start Instance Refresh
        run: |
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "asg-taptoon" \
            --strategy "Rolling" \
            --preferences '{"MinHealthyPercentage":100,"InstanceWarmup":300,"MaxHealthyPercentage":110}'

      - name: Wait for instances to initialize and verify containers
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ec2-ssh-key.pem
          chmod 600 /tmp/ec2-ssh-key.pem

          # 인스턴스 초기화를 위한 시간 제공
          echo "Waiting for instances to initialize (2 minutes)..."
          sleep 120

          INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name "asg-taptoon" \
            --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
            --output json)

          for INSTANCE_ID in $(echo "$INSTANCES" | jq -r '.[]'); do
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)

            echo "Connecting to $INSTANCE_ID ($IP)..."

            # 컨테이너 상태 확인 (재시도 로직)
            for i in {1..10}; do
              echo "Attempt $i: Checking container status..."
              HEALTH=$(ssh -o StrictHostKeyChecking=no -i /tmp/ec2-ssh-key.pem ubuntu@$IP "curl -s localhost:8080/health || echo 'DOWN'")

              if echo "$HEALTH" | grep -q "UP"; then
                echo "Container is healthy on $IP"
                break
              else
                echo "Container is not yet healthy, waiting and retrying..."
                if [ $i -eq 10 ]; then
                  echo "Failed to get container healthy after 10 attempts"
                  ssh -o StrictHostKeyChecking=no -i /tmp/ec2-ssh-key.pem ubuntu@$IP "cd /home/ubuntu/taptoon && docker-compose logs"
                  exit 1
                fi
                sleep 30
              fi
            done
          done
          rm -f /tmp/ec2-ssh-key.pem

      - name: Monitor Instance Refresh
        run: |
          echo "Monitoring Instance Refresh..."
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "asg-taptoon" \
              --query "InstanceRefreshes[0].Status" --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" == "Successful" ] || [ "$STATUS" == "Failed" ] || [ "$STATUS" == "Cancelled" ]; then
              break
            fi
            sleep 10
          done
          if [ "$STATUS" != "Successful" ]; then
            echo "Instance Refresh failed with status: $STATUS"
            exit 1
          fi
            echo "Rolling update completed successfully!"

  health_check:
    needs: deploy_with_rolling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Check ASG instance health
        run: |
          INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name "asg-taptoon" \
            --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" \
            --output json)
          for INSTANCE_ID in $(echo "$INSTANCES" | jq -r '.[]'); do
            IP=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)
            if [ -z "$IP" ]; then
              echo "No public IP for $INSTANCE_ID, skipping..."
              continue
            fi
            echo "Checking health on $IP..."
            HEALTH=$(curl -s "http://$IP:8080/health" || echo "DOWN")
            if echo "$HEALTH" | grep -q "UP"; then
              echo "Instance $INSTANCE_ID ($IP) is healthy!"
            else
              echo "Instance $INSTANCE_ID ($IP) is unhealthy!"
              exit 1
            fi
          done

  cleanup_ecr:
    needs: deploy_with_rolling
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Clean up old ECR images
        env:
          ECR_REPOSITORY: taptoon
        run: |
          IMAGES_TO_DELETE=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[:-5].imageDigest' \
            --output json)
          if [ "$IMAGES_TO_DELETE" != "[]" ] && [ "$IMAGES_TO_DELETE" != "" ]; then
            for digest in $(echo $IMAGES_TO_DELETE | jq -r '.[]'); do
              aws ecr batch-delete-image \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageDigest=$digest
            done
            echo "Old ECR images cleaned up"
          else
            echo "No old ECR images to clean up"
          fi