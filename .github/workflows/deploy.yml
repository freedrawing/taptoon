name: Deploy to AWS
on:
  push:
    branches: [ cd-deploy ]  # 메인 브랜치에 push될 때 실행

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taptoon
          IMAGE_TAG: ${{ github.sha }}
        run: |# Docker 빌드 캐시 사용
          docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
                      --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
                      -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance_info:
          - { host_var: EC2_HOST_1, name: "Instance 1" }
          - { host_var: EC2_HOST_2, name: "Instance 2" }
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - name: Copy Docker Compose file to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets[matrix.instance_info.host_var] }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/taptoon"

      - name: Deploy to ${{ matrix.instance_info.name }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[matrix.instance_info.host_var] }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          # SSH 호스트 키 확인 비활성화
          use_insecure_cipher: true
          script: |
            set -e  # 스크립트 오류 발생 시 즉시 중단
            
            # 환경 변수 설정
            export ECR_REGISTRY=${{secrets.ECR_REGISTRY}}
            export ECR_REPOSITORY="taptoon"
            export IMAGE_TAG="${{ needs.build_and_push.outputs.image-tag }}"
            export AWS_REGION="ap-northeast-2"
            export REDIS_HOST=${{secrets.REDIS_HOST}}
            
            # 디렉토리 변수 설정
            PROJECT_ROOT="/home/ubuntu/taptoon"
            CONFIG_DIR="$PROJECT_ROOT/config"
            
            # 설정 디렉토리 확인
            mkdir -p "$CONFIG_DIR"
            
            # application-deploy.yaml 파일 생성 (GitHub Secrets에서 가져옴)
            echo "${{ secrets.APPLICATION_DEPLOY_YAML }}" > "$CONFIG_DIR/application-deploy.yaml"
            chmod 600 "$CONFIG_DIR/application-deploy.yaml"
            
             # AWS 자격 증명 및 ECR 로그인
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region $AWS_REGION
            aws configure set output json
            
            # ECR 로그인
            echo "Logging in to ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Docker 네트워크 생성 (없는 경우)
            docker network inspect taptoon-network &>/dev/null || docker network create taptoon-network
                        
            # Docker Compose 업데이트
            echo "Setting up Docker Compose..."
            cd "$PROJECT_ROOT"
                      
            # 기존 컨테이너 중지 및 제거
            echo "Stopping and removing existing containers..."
            docker-compose down || true
            docker rm -f taptoon-app 2>/dev/null || true
            
            # Docker Compose 실행
            echo "Pulling Docker image and starting container with Docker Compose..."
            docker-compose pull
            docker-compose up -d
            
            # 컨테이너 상태 확인
            docker-compose ps            
            
            # 사용하지 않는 이미지 정리
            echo "Cleaning up unused Docker images..."
            docker image prune -f
            
            echo "=== Deployment on ${{ matrix.instance_info.name }} completed ==="

  cleanup_ecr:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Clean up old ECR images
        env:
          ECR_REPOSITORY: taptoon
        run: |
          echo "Cleaning up old ECR images..."
          # 최신 5개 이미지만 유지하도록 수정
          IMAGES_TO_DELETE=$(aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --query 'sort_by(imageDetails,& imagePushedAt)[:-5].imageDigest' \
            --output json)
          
          if [ "$IMAGES_TO_DELETE" != "[]" ] && [ "$IMAGES_TO_DELETE" != "" ]; then
            for digest in $(echo $IMAGES_TO_DELETE | jq -r '.[]'); do
              aws ecr batch-delete-image \
              --repository-name $ECR_REPOSITORY \
              --image-ids imageDigest=$digest
            done
            echo "Old ECR images cleaned up successfully"
          else
            echo "No old ECR images to clean up"
          fi