name: Deploy to AWS
on:
  push:
    branches: [ cd-deploy ]  # 메인 브랜치에 push될 때 실행

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ github.sha }}  # 다음 작업에서 사용할 이미지 태그 저장
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}  # ECR 레지스트리 URL 저장
    steps:
      - uses: actions/checkout@v3

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: taptoon
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing to: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build_and_push  # 이전 작업이 완료된 후 실행
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instance_info:
          - { host_var: EC2_HOST_1, name: "Instance 1" }
          - { host_var: EC2_HOST_2, name: "Instance 2" }
    steps:
      - name: Deploy to ${{ matrix.instance_info.name }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[matrix.instance_info.host_var] }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY
          script: |
            # 명시적인 ECR 레지스트리 주소 설정 (outputs에서 가져오지 않음)
            export ECR_REGISTRY="120569645336.dkr.ecr.ap-northeast-2.amazonaws.com"
            export ECR_REPOSITORY="taptoon"
            export IMAGE_TAG="${{ needs.build_and_push.outputs.image-tag }}"
            export AWS_REGION="ap-northeast-2"
            
            echo "=== Deployment on ${{ matrix.instance_info.name }} started ==="
            echo "Deploying image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            
            # 디렉토리 변수 설정
            PROJECT_ROOT="/home/ubuntu/taptoon"
            CURRENT_DIR="$PROJECT_ROOT/current"
            BACKUP_DIR="$PROJECT_ROOT/backup"
            CONFIG_DIR="$PROJECT_ROOT/config"
            
            # AWS CLI 설치 확인 및 설치
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              sudo apt-get update
              sudo apt-get install -y unzip
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip -o awscliv2.zip
              sudo ./aws/install --update
              rm -rf aws awscliv2.zip
            
              # PATH 확인
              export PATH=$PATH:/usr/local/bin
              echo "AWS CLI installed at: $(which aws)"
            fi
            
            # AWS 자격 증명 설정
            mkdir -p ~/.aws
            
            echo "[default]
            aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" > ~/.aws/credentials
            
            echo "[default]
            region=ap-northeast-2
            output=json" > ~/.aws/config
            
            chmod 600 ~/.aws/credentials ~/.aws/config
            
            # ECR 로그인 (Docker의 비 TTY 오류 방지)
            echo "Logging in to ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # 로그인 결과 확인
            if [ $? -ne 0 ]; then
              echo "ECR login failed. Cannot continue."
              exit 1
            else
              echo "ECR login successful."
            fi
            
            # 백업 디렉토리 관리
            mkdir -p "$BACKUP_DIR"
            if [ -d "$BACKUP_DIR/current_backup" ]; then
              echo "Removing old backup..."
              rm -rf "$BACKUP_DIR/current_backup"
            fi
            
            # 현재 디렉토리 백업
            if [ -d "$CURRENT_DIR" ]; then
              echo "Backing up current directory..."
              mv "$CURRENT_DIR" "$BACKUP_DIR/current_backup"
            fi
            
            # 새 current 디렉토리 생성 및 설정 파일 복사
            echo "Creating new current directory..."
            mkdir -p "$CURRENT_DIR"
            
            # application-deploy.yaml 복사 (config 디렉토리에서)
            if [ -f "$CONFIG_DIR/application-deploy.yaml" ]; then
              echo "Copying application-deploy.yaml from config directory..."
              cp "$CONFIG_DIR/application-deploy.yaml" "$CURRENT_DIR/"
            else
              echo "WARNING: application-deploy.yaml not found in config directory!"
              # 백업에서 복구 시도
              if [ -f "$BACKUP_DIR/current_backup/application-deploy.yaml" ]; then
                echo "Recovering application-deploy.yaml from backup..."
                cp "$BACKUP_DIR/current_backup/application-deploy.yaml" "$CURRENT_DIR/"
              else
                echo "ERROR: No application-deploy.yaml found. Deployment cannot continue."
                exit 1
              fi
            fi
            
            # Docker 네트워크 생성
            echo "Creating Docker network..."
            docker network create taptoon-network || true
            
            # Redis 컨테이너 재시작
            echo "Restarting Redis container..."
            docker stop redis-container || true
            docker rm redis-container || true
            docker run -d \
              --name redis-container \
              --network taptoon-network \
              -p 6379:6379 \
              redis:latest
            
            # 새 이미지 다운로드
            echo "Pulling Docker image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
            # 이미지 풀 성공 확인
            if [ $? -ne 0 ]; then
              echo "ERROR: Failed to pull Docker image."
              exit 1
            else
              echo "Docker image pulled successfully."
            fi
            
            # 앱 컨테이너 재시작
            echo "Starting application container..."
            docker stop taptoon-app || true
            docker rm taptoon-app || true
            docker run -d \
              --name taptoon-app \
              --network taptoon-network \
              -p 0.0.0.0:8080:8080 \
              -v "$CURRENT_DIR:/app/config" \
              -e SPRING_PROFILES_ACTIVE=deploy \
              -e SPRING_CONFIG_LOCATION=file:/app/config/application-deploy.yaml \
              -e SPRING_DATA_REDIS_HOST=redis-container \
              -e SPRING_DATA_REDIS_PORT=6379 \
              -e SPRING_REDIS_HOST=redis-container \
              -e SPRING_REDIS_PORT=6379 \
              -e REDISSON_ADDRESS=redis://redis-container:6379 \
              "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            
            # 배포 결과 확인
            if [ $? -eq 0 ]; then
              echo "Container started successfully."
              docker ps | grep taptoon-app
              echo "=== Deployment on ${{ matrix.instance_info.name }} completed successfully ==="
            else
              echo "ERROR: Failed to start container."
              echo "=== Deployment on ${{ matrix.instance_info.name }} failed ==="
              exit 1
            fi
            
            # 사용하지 않는 이미지 정리
            echo "Cleaning up unused Docker images..."
            docker image prune -f