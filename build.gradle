plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

//openFeign
ext {
	set('springCloudVersion', "2023.0.0")
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
dependencies {
	// Spring basic
	implementation 'org.springframework.boot:spring-boot-starter-web' // Spring Web 애플리케이션 개발에 필요한 기본 의존성 포함.
	implementation 'org.springframework.boot:spring-boot-starter-validation' // javax.validation을 통해 데이터 유효성 검사를 지원.
	developmentOnly 'org.springframework.boot:spring-boot-devtools' // 개발 중 핫 리로드 및 기타 편의 기능 제공.
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	// Security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta' // Querydsl의 JPA 관련 기능 제공 (JPAQueryFactory, BooleanBuilder, PathBuilder ...)
	annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta' // QueryDSL APT(Annotation Processing Tool)로 컴파일 시점에 @Entity 애노테이션이 붙은 JPA 엔티티 클래스를 기반으로 Q 클래스를 생성
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api' // QueryDSL APT에서 사용하는 @Generated 애노테이션을 제공.  클래스 생성 시 @Generated 애노테이션이 필요하며, 이를 처리하기 위해 이 의존성이 필요
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api' // JPA 표준 애노테이션(@Entity, @Id, @Column 등)을 정의. QueryDSL APT가 엔티티 클래스를 분석하고 Q 클래스를 생성하는 데 필수

	// h2
	runtimeOnly 'com.h2database:h2'

	// DB
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // temp for 성욱

	// docker
//	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Faker (더미 텍스트 만들어주는 라이브러리)
	testImplementation('com.github.javafaker:javafaker:1.0.2') {
		exclude group: 'org.yaml', module: 'snakeyaml'
	}
	testImplementation 'org.yaml:snakeyaml:2.0'

	// P6Spy (SQL 로그 예쁘게 출력)
	implementation 'p6spy:p6spy:3.9.1'
	implementation 'com.github.gavlyukovskiy:datasource-decorator-spring-boot-autoconfigure:1.9.2'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5' // Java JWT library
	compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	implementation 'javax.xml.bind:jaxb-api:2.3.1' // XML document와 Java 객체 간 매핑 자동화

	// Redisson
	implementation 'org.redisson:redisson-spring-boot-starter:3.44.0'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	// WebFlux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Spring WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// Elastic Search
	implementation 'org.springframework.data:spring-data-elasticsearch'
//	implementation 'org.elasticsearch.client:elasticsearch-rest-client:8.14.3'

	// OpenFeign
	implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

	//aws
	implementation 'software.amazon.awssdk:s3:2.20.68'

	//s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
	implementation 'com.amazonaws:aws-java-sdk-s3'
}

tasks.named('test') {
	useJUnitPlatform()
}
